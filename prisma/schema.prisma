// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// enums
enum UerRoles {
  ADMIN
  CUSTOMER
  AGENT
}

enum ChatStatus {
  PENDING
  PROCESSED
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model User {
  id              Int       @id @default(autoincrement())
  username        String    @unique @db.VarChar(255)
  email           String    @unique @db.VarChar(255)
  firstname       String    @db.VarChar(255)
  lastname        String    @db.VarChar(255)
  country         String    @db.VarChar(255)
  phoneNumber     String    @unique @db.VarChar(20)
  password        String    @db.VarChar(255)
  gender          Gender    @default(MALE)
  role            UerRoles  @default(CUSTOMER)
  isVerified      Boolean   @default(false)
  otps            UserOTP[]
  agent           Agent?
  sentMessages    Message[] @relation("SentMessages")
  receivedMessges Message[] @relation("ReceivedMessages")
  chat            Chat[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model UserOTP {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
  otp       String
  attempts  Int      @default(0)
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model Agent {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
  agent     Chat[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Department {
  id             Int             @id @default(autoincrement())
  name           String          @db.VarChar(255)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  subdepartments SubDepartment[]
}

model SubDepartment {
  id           Int        @id @default(autoincrement())
  name         String     @db.VarChar(255)
  department   Department @relation(fields: [departmentId], references: [id])
  departmentId Int
  chat         Chat[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Chat {
  id              Int           @id @default(autoincrement())
  agentId         Int
  agent           Agent         @relation(fields: [agentId], references: [id])
  customerId      Int
  customer        User          @relation(fields: [customerId], references: [id])
  subDepartment   SubDepartment @relation(fields: [subDepartmentId], references: [id])
  subDepartmentId Int
  status          ChatStatus    @default(PENDING)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  messages        Message[]
}

model Message {
  id         Int      @id @default(autoincrement())
  senderId   Int
  receiverId Int
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  chatId     Int
  chat       Chat     @relation(fields: [chatId], references: [id])
  message    String   @db.VarChar(255)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
