// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// enums
enum UserRoles {
  ADMIN
  CUSTOMER
  AGENT
}

enum ChatStatus {
  PENDING
  PROCESSED
}

enum Gender {
  male
  female
  other
}

enum OtpType {
  email_verification
  password_verification
}

model User {
  id              Int       @id @default(autoincrement())
  username        String    @unique @db.VarChar(255)
  email           String    @unique @db.VarChar(255)
  firstname       String    @db.VarChar(255)
  lastname        String    @db.VarChar(255)
  country         String    @db.VarChar(255)
  phoneNumber     String    @unique @db.VarChar(20)
  password        String    @db.VarChar(255)
  gender          Gender
  role            UserRoles @default(CUSTOMER)
  isVerified      Boolean   @default(false)
  otps            UserOTP[]
  agent           Agent?
  sentMessages    Message[] @relation("SentMessages")
  receivedMessges Message[] @relation("ReceivedMessages")
  chat            Chat[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model UserOTP {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
  otp       String
  type      OtpType
  attempts  Int      @default(0)
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model Agent {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
  agent     Chat[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  assignedDepartments AssignedDepartment[]
}

model Department {
  id                  Int                  @id @default(autoincrement())
  title               String               @db.VarChar(255)
  description         String
  icon                String
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  categories          CatDepart[]
  chats               Chat[]
  assignedDepartments AssignedDepartment[] // Relation to AssignedDepartmen
}

model Category {
  id            Int         @id @default(autoincrement())
  title         String      @db.VarChar(255)
  subTitle      String?
  image         String?
  departments   CatDepart[]
  chat          Chat[]
  subCategories CatSubcat[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Country {
  id    Int    @id @default(autoincrement())
  title String
}

model CatDepart {
  id           Int        @id @default(autoincrement())
  categoryId   Int
  category     Category   @relation(fields: [categoryId], references: [id])
  departmentId Int
  department   Department @relation(fields: [departmentId], references: [id])
}

model AssignedDepartment {
  id           Int @id @default(autoincrement())
  agentId      Int
  departmentId Int

  agent      Agent      @relation(fields: [agentId], references: [id])
  department Department @relation(fields: [departmentId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([agentId, departmentId]) // Composite unique constraint to prevent duplicate assignments
}

model Subcategory {
  id        Int         @id @default(autoincrement())
  title     String      @db.VarChar(255)
  price     Decimal
  catSubcat CatSubcat[]
  // chat         Chat[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model CatSubcat {
  id            Int         @id @default(autoincrement())
  categoryId    Int
  category      Category    @relation(fields: [categoryId], references: [id])
  subCategoryId Int
  subCategory   Subcategory @relation(fields: [subCategoryId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@unique([categoryId, subCategoryId])
}

model Chat {
  id           Int        @id @default(autoincrement())
  agentId      Int
  agent        Agent      @relation(fields: [agentId], references: [id])
  customer     User       @relation(fields: [customerId], references: [id])
  customerId   Int
  category     Category   @relation(fields: [categoryId], references: [id])
  categoryId   Int
  departmentId Int
  department   Department @relation(fields: [departmentId], references: [id])
  status       ChatStatus @default(PENDING)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  messages     Message[]
}

model Message {
  id         Int      @id @default(autoincrement())
  senderId   Int
  receiverId Int
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  chatId     Int
  chat       Chat     @relation(fields: [chatId], references: [id])
  message    String   @db.VarChar(255)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
